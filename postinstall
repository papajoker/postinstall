#!/usr/bin/sh
shopt -s extglob
#set -x
export DISPLAY=:0 

title="Post install finalization"

LC=1
LZ=2
LK=3
LX=4
lib="$LC"

OK=0
path="${0%\/*}"
dbg="/tmp/${0##*\/}.out"
echo "">$dbg


check()
{
    if [[ -f '/usr/bin/kdialog' ]]; then
        lib=$LK
    elif [[ -f '/usr/bin/zenity' ]]; then
        lib=$LZ
    elif [[ -f '/usr/bin/Xdialog' ]]; then
        lib=$LX
    fi
}
#check
# can force zenity or kdialog with param
case "$1" in
    -k) lib=$LK
        [[ -f '/usr/bin/kdialog' ]] || exit4;;
    -z) lib=$LZ
        [[ -f '/usr/bin/zenity' ]] || exit4;;
    -x) lib=$LX
        [[ -f '/usr/bin/Xdialog' ]] || exit4;;
    -c) lib=$LC;;
esac
if (( lib != LC )); then
    exec &> $dbg
fi

[[ "$1" == "-h" ]] && {
    echo -e "Params:
    -c : console mode
    -z : zenity GUI
    -k : kdialog GUI
    -x : xdialog GUI"
    exit 0;
}

### dialogs

question()
# if param2 : force yes
{
    local label="$1"
    [[ "$2" -gt "0" ]] && return 0
    case "$lib" in
        LK) kdialog --yesno "$label" --title "$title" 2>/dev/null ;;
        LZ) zenity --question --text="$label" --title="$title" 2>/dev/null ;;
        LX) Xdialog --title "$title" --yesno "$label" 20 80 2>/dev/null ;;
        *)  local answer
            label=$(echo -e "$label")
            printf "\n:: %s [Y/n]" "$label"
            read -r -n 1 answer
            echo
            case $answer in
                Y|y|'') return 0;;
                *) return 1;
            esac
            ;;
    esac
}
listing()
{
    case "$lib" in
        LK) kdialog --textbox  "$dbg" --title "$title" 512 400 2>/dev/null ;;
        LZ) zenity --text-info --title "$title" --filename="$dbg" --width=512 --height=400 2>/dev/null ;;
        LX) Xdialog --no-cancel --title "$title" --logbox "$dbg" 40 80 2>/dev/null ;;
    esac
}

progres()
{
    local label="${1:-"run Pacman"} ..."
    case "$lib" in
        LZ)
            zenity --progress \
                --title="$title" \
                --text="$label\n wait a moment" \
                --pulsate \
                --percentage=40 2>/dev/null ;;
        #LK)
        #   kdialog --title="$title" \
        #       --progressbar "$label\n wait a moment" 35 2>/dev/null ;;
        LX)
            Xdialog --title="$title" --no-cancel \
                --gauge "$label\n wait a moment" 20 80 35 2>/dev/null ;;
    esac
}


### files conf

conf_gettext()
# retrieve locale label
{
    local txt=$(awk -F':' '/#'${LANG:0:2}':/ { print $2}' "$1")
    [[ -z "$txt" ]] && txt=$(grep -m 1 '^#' "$1")
    echo "$txt"
}

conf_getpkg()
# retrieve packages
{
    local list=$(grep -v "#" "$1")
    echo "${list// /$'\n'}"
}

conf_forced()
# no question ?
{
    local nb=$(grep -c "^#forced$" "$1")
    echo "$nb"
}

### run

instal()
# install package par param $2 (-S or -U)
{
    local pkg_list="$1"
    local cmd="$2"
    local txt=$(conf_gettext "$pkg_list")
    question "$txt" "$(conf_forced "$pkg_list")"
    txt="${txt//\?/}"
    if (( "$?"==0 )); then
        local pkgs=( $(conf_getpkg "$pkg_list") )
        echo -e "\n--$txt"
        echo "--pacman -$cmd ${pkgs[@]} --noconfirm --needed :"
        ! sudo pacman -$cmd "${pkgs[@]}" --noconfirm --needed | progres "$txt"
        if (( "$?" != 0 )); then
            OK=1
        else
            #TODO:
            # BUT allways return 0 :( func progres
            echo "install OK, erase file $pkg_list"
            #erase file "$pkg_list"
        fi
    else
        echo "--not installed: $txt"
    fi
}

if [[ -f "./syncrc" ]]; then
	question "$(conf_gettext './syncrc')"
	if (( "$?"==0 )); then
		sudo pacman-mirrors -t 4 -g
	fi
fi

cd "$path"

for pkg_list in *.pkgs ; do
    instal "$pkg_list" "S"
done

for pkg_list in *.aurs ; do
    instal "$pkg_list" "U"
done

if [[ -f "script.sh" ]]; then
    echo
    if (( lib != LC )); then
        sudo ./script.sh &>>$dbg | progres "script exec..."
    else
        sudo ./script.sh
    fi
    (( "$?" != 0 )) && OK=1
fi

listing

[[ -z "$path" || "$path" == '/' ]] && exit 3
if (( "$OK" != 1 )); then
    # no errors, auto remove
    question "End\n\nauto remove this install software ?"
    if (( "$?"==0 )); then
        echo ::rm -rf "$path"
        # rm -rf "$path"
        #rm "$0" "$path/*.pkgs" "$path/*.aurs" "$path/*.desktop "
        #rm "$path/*.tar.xz"
        :
    fi
fi

rm "$dbg" 2>/dev/null
if (( lib == LC )); then
    read -r -n 1 noting
fi
